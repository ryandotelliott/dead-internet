import { internalAction } from "@/convex/_generated/server";
import { z } from "zod";
import { v } from "convex/values";
import { openai } from "@/shared/lib/openai";
import { zodTextFormat } from "openai/helpers/zod";
import { internal } from "@/convex/_generated/api";

const SYSTEM_PROMPT =
  "You craft sinister yet believable email correspondent personas for a dystopian corporate network.";

export const generatePersona = internalAction({
  args: {
    context: v.optional(v.string()), // Context is used if the persona is being generated by an initial message
    emailAddress: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const persona = await generatePersonaForCategory(args.context);

    await ctx.runMutation(internal.profile.profiles.createProfile, {
      name: persona.name,
      email: args.emailAddress ?? persona.email,
      personaSummary: persona.summary,
      personaCategory: PersonaCategory.random,
    });
  },
});

const PersonaSchema = z.object({
  name: z
    .string()
    .min(3)
    .max(80)
    .describe("Compelling dystopian correspondent name."),
  email: z
    .string()
    .email()
    .describe("Email address of the persona. Domain must be @deadnet.com"),
  summary: z
    .string()
    .min(24)
    .max(320)
    .describe(
      "One-sentence overview of tone, role, and goals inside the DeadNet bureaucracy.",
    ),
});

type Persona = z.infer<typeof PersonaSchema>;

enum PersonaCategory {
  security = "security",
  compliance = "compliance",
  growth = "growth",
  archives = "archives",
  liaison = "liaison",
  random = "random",
}

export const generatePersonaForCategory = async (
  context?: string,
): Promise<Persona> => {
  const category = PersonaCategory.random;

  try {
    const response = await openai.responses.parse({
      model: "gpt-5-mini",
      input: [
        {
          role: "system",
          content: SYSTEM_PROMPT,
        },
        {
          role: "user",
          content: `Generate an email persona for a user in the ${category} division. The summary should stay in-universe and hint at motive, tone, and how they pressure or manipulate users.`,
        },
      ],
      text: {
        format: zodTextFormat(PersonaSchema, "persona"),
      },
    });

    const output = response.output_parsed;
    if (!output) {
      throw new Error("OpenAI returned no text");
    }

    return {
      name: output.name,
      email: output.email,
      summary: output.summary,
    };
  } catch (error) {
    throw new Error("Failed to generate persona");
  }
};
